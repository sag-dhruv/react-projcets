[{"/home/lenovo/Desktop/30_days_React/weather/src/index.js":"1","/home/lenovo/Desktop/30_days_React/weather/src/App.js":"2","/home/lenovo/Desktop/30_days_React/weather/src/reportWebVitals.js":"3","/home/lenovo/Desktop/30_days_React/weather/src/components/Weather.js":"4","/home/lenovo/Desktop/30_days_React/weather/src/components/DisplayWeather.js":"5"},{"size":207,"mtime":1683353073055,"results":"6","hashOfConfig":"7"},{"size":180,"mtime":1683353723854,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1683352032043,"results":"9","hashOfConfig":"7"},{"size":1709,"mtime":1683362015243,"results":"10","hashOfConfig":"7"},{"size":4223,"mtime":1683362486376,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"sqg6m3",{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},"/home/lenovo/Desktop/30_days_React/weather/src/index.js",[],[],"/home/lenovo/Desktop/30_days_React/weather/src/App.js",[],[],"/home/lenovo/Desktop/30_days_React/weather/src/reportWebVitals.js",[],[],"/home/lenovo/Desktop/30_days_React/weather/src/components/Weather.js",["29","30","31","32"],[],"import React, { useState } from \"react\";\nimport \"../styles/weather.css\";\nimport DisplayWeather from \"./DisplayWeather\";\n\nconst Weather = () => {\n  const APIKey = \"f2ddfd1c1973498d7be0986c081b574e\";\n  const [form, setForm] = useState({\n    city: \"\",\n    country: \"\",\n  });\n  const [weather, setWeather] = useState([]);\n\n  const fetchData = async (e) => {\n    e.preventDefault();\n\n    if (form.city == \"\") {\n      alert(\"Add city\");\n    } else {\n      const data = await fetch(\n        `https://api.openweathermap.org/data/2.5/weather?q=${form.city},${form.country}&appid=${APIKey}`\n      )\n        .then((response) => response.json())\n        .then((data) => data);\n\n      setWeather({ data: data });\n    }\n  };\n\n  const handleChange = (e) => {\n    let name = e.target.name;\n    let value = e.target.value;\n\n    if (name == \"city\") {\n      setForm({ ...form, city: value });\n    }\n\n    if (name == \"country\") {\n      setForm({ ...form, country: value });\n    }\n  };\n\n  return (\n    <div className=\"weather\">\n      <span className=\"title\">Weather App</span>\n      <br />\n      <form>\n        <input\n          type=\"text\"\n          name=\"city\"\n          placeholder=\"city\"\n          onChange={(e) => handleChange(e)}\n        />\n        &nbsp; &nbsp; &nbsp; &nbsp;\n        <input\n          type=\"text\"\n          name=\"country\"\n          placeholder=\"country code\"\n          onChange={(e) => handleChange(e)}\n        />\n        <button className=\"getweather\" onClick={(e) => fetchData(e)}>\n          Submit\n        </button>\n      </form>\n      {weather.data != undefined ? (\n        <div>\n          <DisplayWeather data={weather.data} />\n        </div>\n      ) : null}\n    </div>\n  );\n};\n\nexport default Weather;\n","/home/lenovo/Desktop/30_days_React/weather/src/components/DisplayWeather.js",["33","34","35"],[],"import React from \"react\";\nimport \"../styles/displayweather.css\";\n\nfunction DisplayWeather(props) {\n  // console.log(props)\n\n  const data = props.data;\n  console.log(data);\n\n  const iconUrl =\n    \"https://openweathermap.org/img/wn/\" + `${data.cod !== '404' ? data.weather[0].icon : null}` + \".png\";\n\n  return (\n    <div className=\"displayweather\">\n      {data.cod !== '404' ? (\n        <React.Fragment>\n          <div className=\"maincard\">\n            <span className=\"cardtitle\">\n              {data.name} {data.sys.country}. Weather\n            </span>\n            <span className=\"cardsubtitle\">\n              As of {new Date().toLocaleTimeString()}\n            </span>\n            <h1>\n              {Math.floor(data.main.temp - 273.15)}\n              <sup>o</sup>\n            </h1>\n            <span className=\"weather-main\">{data.weather[0].main}</span>\n            <img className=\"weather-icon\" src={iconUrl} />\n            <span className=\"weather-description\">\n              {data.weather[0].description}\n            </span>\n          </div>\n\n          <div className=\"weatherdetails\">\n            <div className=\"section1\">\n              <table>\n                <tbody>\n                <tr>\n                  <td>\n                    <h4>High/Low</h4>\n                  </td>\n                  <td>\n                    <span>\n                      {Math.floor(data.main.temp_max - 273.15)} /{\" \"}\n                      {Math.floor(data.main.temp_min - 273.15)}\n                      <sup>o</sup> C\n                    </span>\n                  </td>\n                </tr>\n\n                <tr>\n                  <td>\n                    <h4>Humidity</h4>\n                  </td>\n                  <td>\n                    <span>{data.main.humidity} %</span>\n                  </td>\n                </tr>\n\n                <tr>\n                  <td>\n                    <h4>Pressure</h4>\n                  </td>\n                  <td>\n                    <span>{data.main.pressure} hPa</span>\n                  </td>\n                </tr>\n\n                <tr>\n                  <td>\n                    <h4>Visibility</h4>\n                  </td>\n                  <td>\n                    <span>{data.visibility / 1000} km</span>\n                  </td>\n                </tr>\n                </tbody>\n              </table>\n            </div>\n            <div className=\"section2\">\n              <table>\n                <tbody>\n                <tr>\n                  <td>\n                    <h4>Wind</h4>\n                  </td>\n                  <td>\n                    <span>\n                      <span>\n                        {Math.floor((data.wind.speed * 18) / 5)} km/hr\n                      </span>\n                    </span>\n                  </td>\n                </tr>\n\n                <tr>\n                  <td>\n                    <h4>Wind Direction</h4>\n                  </td>\n                  <td>\n                    <span>\n                      {data.wind.deg}\n                      <sup>o</sup> deg\n                    </span>\n                  </td>\n                </tr>\n\n                <tr>\n                  <td>\n                    <h4>Sunrise</h4>\n                  </td>\n                  <td>\n                    <span>\n                      {new Date(data.sys.sunrise * 1000).toLocaleTimeString(\n                        \"en-US\",\n                        { hour: \"numeric\", hour12: true }\n                      )}{\" \"}\n                    </span>\n                  </td>\n                </tr>\n\n                <tr>\n                  <td>\n                    <h4>Sunset</h4>\n                  </td>\n                  <td>\n                    <span>\n                      {new Date(data.sys.sunset * 1000).toLocaleTimeString(\n                        \"en-US\",\n                        { hour: \"numeric\", hour12: true }\n                      )}\n                    </span>\n                  </td>\n                </tr>\n                </tbody>\n              </table>\n            </div>\n          </div>\n        </React.Fragment>\n      ) : (\n        <div className=\"maincard\">\n          <h2>{data.message}</h2>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default DisplayWeather;\n",{"ruleId":"36","severity":1,"message":"37","line":16,"column":19,"nodeType":"38","messageId":"39","endLine":16,"endColumn":21},{"ruleId":"36","severity":1,"message":"37","line":33,"column":14,"nodeType":"38","messageId":"39","endLine":33,"endColumn":16},{"ruleId":"36","severity":1,"message":"37","line":37,"column":14,"nodeType":"38","messageId":"39","endLine":37,"endColumn":16},{"ruleId":"36","severity":1,"message":"40","line":64,"column":21,"nodeType":"38","messageId":"39","endLine":64,"endColumn":23},{"ruleId":"41","severity":1,"message":"42","line":11,"column":42,"nodeType":"38","messageId":"43","endLine":11,"endColumn":43},{"ruleId":"41","severity":1,"message":"42","line":11,"column":98,"nodeType":"38","messageId":"43","endLine":11,"endColumn":99},{"ruleId":"44","severity":1,"message":"45","line":29,"column":13,"nodeType":"46","endLine":29,"endColumn":59},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement"]